// <auto-generated />
using System;
using AnimalShelter.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimalShelter.Migrations
{
    [DbContext(typeof(AnimalShelterDbContext))]
    [Migration("20221124165715_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AnimalShelter.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.ToTable("Adreses");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Adoption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Animal_Id")
                        .HasColumnType("int");

                    b.Property<int>("Candidate_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("Animal_Id")
                        .IsUnique();

                    b.HasIndex("Candidate_Id");

                    b.ToTable("Adoptions");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("Den_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Gender_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Race_id")
                        .HasColumnType("int");

                    b.Property<int>("Species_Id")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Den_Id")
                        .IsUnique()
                        .HasFilter("[Den_Id] IS NOT NULL");

                    b.HasIndex("Gender_id");

                    b.HasIndex("Race_id");

                    b.HasIndex("Species_Id");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("AnimalShelter.Entities.AnimalCandidateRequirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateRequirementId")
                        .HasColumnType("int");

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateRequirementId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("AnimalCandidateRequirements");
                });

            modelBuilder.Entity("AnimalShelter.Entities.AnimalFuture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Animal_Id")
                        .HasColumnType("int");

                    b.Property<int>("Characeristic_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Animal_Id");

                    b.HasIndex("Characeristic_Id");

                    b.ToTable("AnimalFutures");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Box", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Species_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Species_id");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("AnimalShelter.Entities.CandidateRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId")
                        .IsUnique();

                    b.HasIndex("GenderId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("CandidateRequirements");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Den", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Box_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Box_Id");

                    b.ToTable("Dens");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("AnimalShelter.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Address", b =>
                {
                    b.HasOne("AnimalShelter.Entities.Candidate", "Candidate")
                        .WithOne("Address")
                        .HasForeignKey("AnimalShelter.Entities.Address", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Adoption", b =>
                {
                    b.HasOne("AnimalShelter.Entities.Animal", "Animal")
                        .WithOne("Adoption")
                        .HasForeignKey("AnimalShelter.Entities.Adoption", "Animal_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter.Entities.Candidate", "Candidate")
                        .WithMany("Adoprions")
                        .HasForeignKey("Candidate_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Animal", b =>
                {
                    b.HasOne("AnimalShelter.Entities.Den", "Den")
                        .WithOne("Animal")
                        .HasForeignKey("AnimalShelter.Entities.Animal", "Den_Id");

                    b.HasOne("AnimalShelter.Entities.Gender", "Gender")
                        .WithMany("Animals")
                        .HasForeignKey("Gender_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter.Entities.Race", "Race")
                        .WithMany("Animals")
                        .HasForeignKey("Race_id")
                        .IsRequired();

                    b.HasOne("AnimalShelter.Entities.Species", "Species")
                        .WithMany("Animals")
                        .HasForeignKey("Species_Id")
                        .IsRequired();

                    b.Navigation("Den");

                    b.Navigation("Gender");

                    b.Navigation("Race");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("AnimalShelter.Entities.AnimalCandidateRequirements", b =>
                {
                    b.HasOne("AnimalShelter.Entities.CandidateRequirement", "CandidateRequirement")
                        .WithMany("AnimalCandidateRequirements")
                        .HasForeignKey("CandidateRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter.Entities.Characteristic", "Characteristic")
                        .WithMany("AnimalCandidateRequirements")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateRequirement");

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("AnimalShelter.Entities.AnimalFuture", b =>
                {
                    b.HasOne("AnimalShelter.Entities.Animal", "Animal")
                        .WithMany("AnimalFutures")
                        .HasForeignKey("Animal_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter.Entities.Characteristic", "Characteristic")
                        .WithMany("AnimalsFutures")
                        .HasForeignKey("Characeristic_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Box", b =>
                {
                    b.HasOne("AnimalShelter.Entities.Species", "Species")
                        .WithMany("Boxes")
                        .HasForeignKey("Species_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("AnimalShelter.Entities.CandidateRequirement", b =>
                {
                    b.HasOne("AnimalShelter.Entities.Candidate", "Candidate")
                        .WithOne("CandidateRequirement")
                        .HasForeignKey("AnimalShelter.Entities.CandidateRequirement", "CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter.Entities.Gender", "Gender")
                        .WithMany("CandidateRequirements")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimalShelter.Entities.Species", "Species")
                        .WithMany("CandidateRequirements")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Gender");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Den", b =>
                {
                    b.HasOne("AnimalShelter.Entities.Box", "Box")
                        .WithMany("Dens")
                        .HasForeignKey("Box_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Race", b =>
                {
                    b.HasOne("AnimalShelter.Entities.Species", "Species")
                        .WithMany("Races")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Animal", b =>
                {
                    b.Navigation("Adoption");

                    b.Navigation("AnimalFutures");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Box", b =>
                {
                    b.Navigation("Dens");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Candidate", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Adoprions");

                    b.Navigation("CandidateRequirement")
                        .IsRequired();
                });

            modelBuilder.Entity("AnimalShelter.Entities.CandidateRequirement", b =>
                {
                    b.Navigation("AnimalCandidateRequirements");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Characteristic", b =>
                {
                    b.Navigation("AnimalCandidateRequirements");

                    b.Navigation("AnimalsFutures");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Den", b =>
                {
                    b.Navigation("Animal");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Gender", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("CandidateRequirements");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Race", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("AnimalShelter.Entities.Species", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Boxes");

                    b.Navigation("CandidateRequirements");

                    b.Navigation("Races");
                });
#pragma warning restore 612, 618
        }
    }
}
